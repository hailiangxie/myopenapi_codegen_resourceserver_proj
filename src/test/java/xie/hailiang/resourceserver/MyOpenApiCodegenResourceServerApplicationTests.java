package xie.hailiang.resourceserver;

import static org.assertj.core.api.Assertions.assertThat;
import static org.junit.Assert.assertEquals;
import static org.junit.jupiter.api.Assertions.assertTrue;
import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.delete;
import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.get;
import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.post;
import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.put;
import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.status;

import java.util.Optional;

import org.json.JSONObject;
import org.junit.Before;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.junit.runner.RunWith;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.test.autoconfigure.web.servlet.AutoConfigureMockMvc;
import org.springframework.boot.test.context.SpringBootTest;
import org.springframework.http.MediaType;
import org.springframework.security.web.FilterChainProxy;
import org.springframework.test.context.junit4.SpringRunner;
import org.springframework.test.context.web.WebAppConfiguration;
import org.springframework.test.web.servlet.MockMvc;
import org.springframework.test.web.servlet.MvcResult;
import org.springframework.test.web.servlet.setup.MockMvcBuilders;
import org.springframework.web.context.WebApplicationContext;

import com.fasterxml.jackson.databind.ObjectMapper;

import xie.hailiang.resourceserver.entity.Customer;
import xie.hailiang.resourceserver.service.CustomerService;

@RunWith(SpringRunner.class)
@WebAppConfiguration
@SpringBootTest(classes = MyOpenApiCodegenResourceServerApplication.class)
@AutoConfigureMockMvc
class MyOpenApiCodegenResourceServerApplicationTests {
	
	//this access token was generated by calling the authorization server endpoint /oauth/token
    private final String accessToken = "eyJhbGciOiJSUzI1NiIsInR5cCI6IkpXVCJ9.eyJleHAiOjE2NjU1NDE2MDIsInVzZXJfbmFtZSI6InVzZXIiLCJhdXRob3JpdGllcyI6WyJVU0VSIl0sImp0aSI6IjRmMTA1MzNmLWFmYjktNDQ4OS05MmZjLTQ3ZGUzZWM1ODRlOSIsImNsaWVudF9pZCI6Im9hdXRoMl9jbGllbnQxIiwic2NvcGUiOlsicmVhZCJdfQ.r3_BC7VMQZlyMr-AL5WNGxv00km2bOZMj0OX9ZHTwueEpYjwgJ0J4MDHdRgff0BMykQFBQk84LVqV1MzZpXZuv0258mZceN6tWbPikVcWaJLv_EMOBCCQSvKRQZUuKsw5qqznj0c3wGFVHCeHFUwHUqK2otbA9WJOstf_I0ihdwfTS-NTZefNMWNOeGvNj8ojTFQb035xWjVxicOp7CI6_avtO_bb4pp7OB3RUSwkomdjfbajXdBt4MmgEGUyF4pKivhHusYEw8rLNOPwmP4F5TMjOnOqma26wV-B5sewt9_ngLGTM6mQnmgynltiwDNKYgagl9BxqGL_12zD7plrg";
	
	@Autowired
    private WebApplicationContext wac;

    @Autowired
    private FilterChainProxy springSecurityFilterChain;

    @Autowired
    private MockMvc mockMvc;

    @Autowired
    private CustomerService CustomerService;
    
    private Customer customer;
    
    @Autowired
    private ObjectMapper objectMapper;
    
    @Before
    public void setUp() {
    	this.mockMvc = MockMvcBuilders.webAppContextSetup(this.wac)
    	          .addFilter(springSecurityFilterChain).build();
    }
    
    @BeforeEach
    public void setUpEach() {
        customer = new Customer().builder()
				.id(1L)
				.firstName("AA")
				.lastName("Li")
				.email("ali@email.com")
				.phone("11112222")
				.status(1)
				.build();
    }

    @Test
    public void test1_givenNoToken_whenGetSecureRequest_thenUnauthorized() throws Exception {
        mockMvc.perform(get("/hello"))
          .andExpect(status().isUnauthorized());
    }
    
    @Test
    public void test2_givenValidAccessToken_whenGetSecureRequest_thenOK() throws Exception {
        mockMvc.perform(get("/hello")
          .header("Authorization", "Bearer " + accessToken))
          .andExpect(status().isOk());
    }
    
    @Test
    public void test3_givenInvalidAccessToken_whenGetSecureRequest_thenUnauthorized() throws Exception {
        mockMvc.perform(get("/hello")
          .header("Authorization", "Bearer invalidtokentest"))
          .andExpect(status().isUnauthorized());
    }
    
    @Test
    public void test4_givenNoToken_whenAddCustomer_thenUnauthorized() throws Exception {
    	mockMvc.perform(
    								post("/api/v3/customer")
    								.accept(MediaType.APPLICATION_JSON).content(objectMapper.writeValueAsString(customer))
    								.contentType(MediaType.APPLICATION_JSON)
    		)
    		.andExpect(status().isUnauthorized());
    }
    
    @Test
    public void test5_givenValidToken_whenAddCustomer_thenOK() throws Exception {
    	MvcResult result = mockMvc.perform(
    								post("/api/v3/customer")
    								.header("Authorization", "Bearer " + accessToken)
    								.accept(MediaType.APPLICATION_JSON).content(objectMapper.writeValueAsString(customer))
    								.contentType(MediaType.APPLICATION_JSON)
    		)
    		.andExpect(status().isOk())
    		.andReturn();
    	
    	var returnObj = new JSONObject(result.getResponse().getContentAsString());
    	String email = returnObj.getString("email");
    	assertEquals("ali@email.com", email);
    }
    
    @Test
    public void test6_givenInvalidToken_whenGetCustomer_thenUnauthorized() throws Exception {
    	mockMvc.perform(
    								get("/api/v3/customer/" + customer.getId())
    								.header("Authorization", "Bearer itisaninvalidaccesstoken")
    								.accept(MediaType.APPLICATION_JSON)
    								.contentType(MediaType.APPLICATION_JSON)
    		)
    		.andExpect(status().isUnauthorized());
    }
    
    @Test
    public void test7_givenValidToken_whenGetExistingCustomer_thenOK() throws Exception {
    	Customer created = CustomerService.addCustomer(customer);
    	assertThat(created).isNotNull();
    	
    	MvcResult result = mockMvc.perform(
    								get("/api/v3/customer/" + created.getId())
    								.header("Authorization", "Bearer " + accessToken)
    								.accept(MediaType.APPLICATION_JSON)
    								.contentType(MediaType.APPLICATION_JSON)
    		)
    		.andExpect(status().isOk())
    		.andReturn();
    	
    	var returnObj = new JSONObject(result.getResponse().getContentAsString());
    	String email = returnObj.getString("email");
    	assertEquals("ali@email.com", email);
    }
    
    @Test
    public void test8_givenValidToken_whenGetNotExistsCustomer_thenCustomerNotFound() throws Exception {    	
    	mockMvc.perform(
    								get("/api/v3/customer/9999999")
    								.header("Authorization", "Bearer " + accessToken)
    								.accept(MediaType.APPLICATION_JSON)
    								.contentType(MediaType.APPLICATION_JSON)
    		)
    		.andExpect(status().isNotFound());
    }
    
    @Test
    public void test9_givenValidToken_whenUpdateExistingCustomer_thenOK() throws Exception {
    	Customer created = CustomerService.addCustomer(customer);
    	assertThat(created).isNotNull();
    	
    	created.setFirstName("Jack");
    	created.setLastName("He");
    	created.setEmail("jhe@email.com");
    	MvcResult result = mockMvc.perform(
    								put("/api/v3/customer")
    								.header("Authorization", "Bearer " + accessToken)
    								.accept(MediaType.APPLICATION_JSON).content(objectMapper.writeValueAsString(created))
    								.contentType(MediaType.APPLICATION_JSON)
    		)
    		.andExpect(status().isOk())
    		.andReturn();
    	
    	var returnObj = new JSONObject(result.getResponse().getContentAsString());
    	String email = returnObj.getString("email");
    	assertEquals("jhe@email.com", email);
    }
    
    @Test
    public void test10_givenValidToken_whenDeleteExistingCustomer_thenOK() throws Exception {
    	Customer created = CustomerService.addCustomer(customer);
    	assertThat(created).isNotNull();
    	
    	mockMvc.perform(
    								delete("/api/v3/customer/" + created.getId())
    								.header("Authorization", "Bearer " + accessToken)
    								.accept(MediaType.APPLICATION_JSON)
    								.contentType(MediaType.APPLICATION_JSON)
    		)
    		.andExpect(status().isOk());
    	
    	Optional<Customer> deleted = CustomerService.findCustomerById(created.getId());
    	assertTrue(deleted.isEmpty());
    }
}
