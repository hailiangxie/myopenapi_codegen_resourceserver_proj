openapi: 3.0.2
info:
  title: Customer - OpenAPI 3.0
  description: |-
    This is a sample Customer Server based on the OpenAPI 3.0 specification.  You can find out more about
    Swagger at [http://swagger.io](http://swagger.io).

  version: 1.0.0
externalDocs:
  description: Find out more about Swagger
  url: http://swagger.io
servers:
  - url: /api/v3
tags:
  - name: customer
    description: Everything about the customers
    externalDocs:
      description: Find out more
      url: http://swagger.io
paths:
  /customer:
    put:
      tags:
        - customer
      summary: Update an existing customer
      description: Update an existing customer by Id
      operationId: updateCustomer
      requestBody:
        description: Update an existent customer
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Customer'
          application/xml:
            schema:
              $ref: '#/components/schemas/Customer'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/Customer'
        required: true
      responses:
        '200':
          description: Successful operation
          content:
            application/xml:
              schema:
                $ref: '#/components/schemas/Customer'
            application/json:
              schema:
                $ref: '#/components/schemas/Customer'
        '400':
          description: Invalid ID supplied
        '401':
          $ref: "#/components/responses/UnauthorizedError"
        '404':
          description: Customer not found
        '405':
          description: Validation exception
      security:
        - bearerAuth: []
    post:
      tags:
        - customer
      summary: Add a new customer
      description: Add a new customer
      operationId: addCustomer
      requestBody:
        description: Create a new customer
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Customer'
          application/xml:
            schema:
              $ref: '#/components/schemas/Customer'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/Customer'
        required: true
      responses:
        '200':
          description: Successful operation
          content:
            application/xml:
              schema:
                $ref: '#/components/schemas/Customer'
            application/json:
              schema:
                $ref: '#/components/schemas/Customer'
        '401':
          $ref: "#/components/responses/UnauthorizedError"
        '405':
          description: Invalid input
      security:
        - bearerAuth: []
  /customer/{customerId}:
    get:
      tags:
        - customer
      summary: Find customer by ID
      description: Returns a single customer
      operationId: getCustomerById
      parameters:
        - name: customerId
          in: path
          description: ID of customer to return
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: successful operation
          content:
            application/xml:
              schema:
                $ref: '#/components/schemas/Customer'
            application/json:
              schema:
                $ref: '#/components/schemas/Customer'
        '400':
          description: Invalid ID supplied
        '401':
          $ref: "#/components/responses/UnauthorizedError"
        '404':
          description: Customer not found
      security:
        - api_key: []
        - bearerAuth: []
    delete:
      tags:
        - customer
      summary: Deletes a customer
      description: ''
      operationId: deleteCustomer
      parameters:
        - name: customerId
          in: path
          description: Customer id to delete
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '400':
          description: Invalid customer value
        '401':
          $ref: "#/components/responses/UnauthorizedError"
      security:
        - bearerAuth: []
components:
  schemas:
    Customer:
      type: object
      properties:
        id:
          type: integer
          format: int64
          example: 10
        firstName:
          type: string
          example: John
        lastName:
          type: string
          example: James
        email:
          type: string
          example: john@email.com
        phone:
          type: string
          example: '12345'
        status:
          type: integer
          description: Status
          format: int32
          example: 1
      xml:
        name: csutomer
    ApiResponse:
      type: object
      properties:
        code:
          type: integer
          format: int32
        type:
          type: string
        message:
          type: string
      xml:
        name: '##default'
  requestBodies:
    Customer:
      description: Customer object that needs to be added to database
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Customer'
        application/xml:
          schema:
            $ref: '#/components/schemas/Customer'
    CustomerArray:
      description: List of customer object
      content:
        application/json:
          schema:
            type: array
            items:
              $ref: '#/components/schemas/Customer'
  responses:
    UnauthorizedError:
      description: Access token is missing or invalid
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
    api_key:
      type: apiKey
      name: api_key
      in: header
