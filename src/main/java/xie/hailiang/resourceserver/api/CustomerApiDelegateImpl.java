package xie.hailiang.resourceserver.api;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.stereotype.Component;

import xie.hailiang.resourceserver.entity.Customer;
import xie.hailiang.resourceserver.mapper.CustomerMapper;
import xie.hailiang.resourceserver.model.CustomerJson;
import xie.hailiang.resourceserver.service.CustomerService;

/**
 * 
 * @author Hailiang XIE
 * Implements the CustomerApi interface generated by the OpenApi.
 *
 */
@Component
public class CustomerApiDelegateImpl implements CustomerApiDelegate {
	
	private final CustomerService customerService;
	private final CustomerMapper customerMapper;
	
	@Autowired
	public CustomerApiDelegateImpl(CustomerService customerService, CustomerMapper customerMapper) {
		this.customerService = customerService;
		this.customerMapper = customerMapper;
	}
	
	@Override
	public ResponseEntity<CustomerJson> addCustomer(CustomerJson customerJson) {
		Customer customer = customerService.addCustomer(customerMapper.toEntity(customerJson));
		return new ResponseEntity<>(customerMapper.toDto(customer), HttpStatus.OK);
	}
	
	@Override
	public ResponseEntity<Void> deleteCustomer(Long customerId) {
		try {
			customerService.deleteCustomer(customerId);
		} catch (Exception e) {
			e.printStackTrace();
			return new ResponseEntity<>(HttpStatus.BAD_REQUEST);
		}
		return new ResponseEntity<>(HttpStatus.OK);
	}
	
	@Override
	public ResponseEntity<CustomerJson> getCustomerById(Long customerId) {
		Customer customer = null;
		try {
			customer = customerService.findCustomerById(customerId)
					.orElseThrow(() -> new Exception("Customer not found: " + customerId));
		} catch (Exception e) {
			e.printStackTrace();
			return new ResponseEntity<>(HttpStatus.NOT_FOUND);
		}
		return new ResponseEntity<>(customerMapper.toDto(customer), HttpStatus.OK);
	}
	
	@Override
	public ResponseEntity<CustomerJson> updateCustomer(CustomerJson customerJson) {
		Customer customer = null;
		try {
			customer = customerService.updateCustomer(customerMapper.toEntity(customerJson));
		} catch (Exception e) {
			e.printStackTrace();
			return new ResponseEntity<>(HttpStatus.NOT_FOUND);
		}
		return new ResponseEntity<>(customerMapper.toDto(customer), HttpStatus.OK);
	}
}
